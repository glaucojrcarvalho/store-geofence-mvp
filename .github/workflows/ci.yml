---
name: CI

on: [push, pull_request]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    env:
      PYTHONPATH: ${{ github.workspace }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          if [ -f dev-requirements.txt ]; then
            pip install -r dev-requirements.txt
          fi

      - name: Lint (ruff)
        run: |
          # use runner-provided temp directory for ruff cache to avoid workspace permission issues
          export RUFF_CACHE_DIR="$RUNNER_TEMP"
          ruff --version
          ruff check app

      - name: Unit tests
        run: |
          pytest -q

      - name: Docker build
        run: |
          docker build -t store-geofence-mvp:ci .

  e2e:
    runs-on: ubuntu-latest
    needs: build-and-test
    services:
      db:
        image: postgis/postgis:15-3.4
        env:
          POSTGRES_DB: geofence
          POSTGRES_USER: geofence
          POSTGRES_PASSWORD: geofence
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready -U geofence -d geofence
          --health-interval 5s
          --health-timeout 5s
          --health-retries 10
      redis:
        image: redis:7
        ports:
          - 6379:6379

    env:
      PYTHONPATH: ${{ github.workspace }}
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432
      POSTGRES_DB: geofence
      POSTGRES_USER: geofence
      POSTGRES_PASSWORD: geofence
      REDIS_URL: redis://redis:6379/0
      DEMO_TOKEN: ${{ secrets.DEMO_TOKEN }}
      SECRET_KEY: ${{ secrets.SECRET_KEY }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          if [ -f dev-requirements.txt ]; then
            pip install -r dev-requirements.txt
          fi

      - name: Wait for PostgreSQL
        run: |
          python - <<PY
            import time
            import psycopg2
            from psycopg2 import OperationalError
            deadline = time.time() + 60
            while time.time() < deadline:
                try:
                    conn = psycopg2.connect(
                        host="db",
                        port=5432,
                        dbname="geofence",
                        user="geofence",
                        password="geofence",
                    )
                    conn.close()
                    print("postgres ready")
                    break
                except OperationalError:
                    print("waiting for postgres...")
                    time.sleep(1)
            else:
                raise SystemExit("Postgres not ready in time")
          PY

      - name: Run migrations
        run: |
          alembic upgrade head

      - name: Start API (background)
        run: |
          nohup uvicorn app.main:app --host 0.0.0.0 --port 8000 \
            &>/tmp/uvicorn.log &
          echo "Waiting for API /healthz to return 200..."
          for i in $(seq 1 60); do
            if curl --fail --silent \
               http://127.0.0.1:8000/healthz >/dev/null 2>&1; then
              echo "API is up"
              break
            fi
            echo "waiting for api... ($i)"
            sleep 1
          done
          if ! curl --fail --silent \
             http://127.0.0.1:8000/healthz >/dev/null 2>&1; then
            echo "API failed to start, printing uvicorn log:"
            tail -n +1 /tmp/uvicorn.log
            exit 1
          fi

      - name: Run E2E tests
        run: |
          pytest tests/test_e2e.py -q
